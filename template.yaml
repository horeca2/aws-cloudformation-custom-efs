AWSTemplateFormatVersion: 2010-09-09
Parameters:
  BackupVaultName:
    Type: String
    Default: Default
  RecoveryPointArn:
    Type: String
    Default: arn:aws:backup:eu-central-1:918404900336:recovery-point:8ce28d06-437d-4c1b-83fa-dc2e46e729fe
  Vpc:
    Type: AWS::EC2::VPC::Id  
  # SourceSecurityGroupId:
  #   Type:  
  Subnet1:
    Type: AWS::EC2::Subnet::Id  

Conditions:
  IsEmpty: !Equals [!Ref RecoveryPointArn, '']  
  IsRestore: !Not [!Condition IsEmpty]  
       
Resources:
  EmptyEfs:
    Type: AWS::EFS::FileSystem
    Condition: IsEmpty
    Properties:
      BackupPolicy:
        Status: DISABLED
      Encrypted: "false"
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
  
  RecoveredEfs:
    Type: Custom::RecoveredEfs
    Properties: 
      ServiceToken: !GetAtt RunEfsStateMachineLambda.Arn
      BackupVaultName: !Ref BackupVaultName
      RecoveryPoint: !Ref RecoveryPointArn
 
  FixingEfs:
    Type: Custom::FixingEfs
    DependsOn: RecoveredEfs
    Properties: 
      ServiceToken: !GetAtt RunFixStateMachineLambda.Arn
       
  EfsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: |
        {
          "Comment": "A description of my state machine",
          "StartAt": "Choice action",
          "States": {
            "Choice action": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Request.RequestType",
                  "StringEquals": "Create",
                  "Next": "GetRecoveryPointRestoreMetadata"
                },
                {
                  "Variable": "$.Request.RequestType",
                  "StringEquals": "Delete",
                  "Next": "DeleteFileSystem"
                }
              ]
            },
            "GetRecoveryPointRestoreMetadata": {
              "Type": "Task",
              "Parameters": {
                "BackupVaultName.$": "$.Request.ResourceProperties.BackupVaultName",
                "RecoveryPointArn.$": "$.Request.ResourceProperties.RecoveryPoint"
              },
              "Resource": "arn:aws:states:::aws-sdk:backup:getRecoveryPointRestoreMetadata",
              "ResultPath": "$.GetRecoveryPointRestoreMetadataResult",
              "Next": "StartRestoreJob"
            },
            "StartRestoreJob": {
              "Type": "Task",
              "Parameters": {
                "IamRoleArn.$": "$.BackupRoleArn",
                "Metadata": {
                  "file-system-id.$": "$.GetRecoveryPointRestoreMetadataResult.RestoreMetadata.file-system-id",
                  "Encrypted": "false",
                  "PerformanceMode": "generalPurpose",
                  "CreationToken.$": "$.GetRecoveryPointRestoreMetadataResult.RestoreMetadata.aws:backup:request-id",
                  "newFileSystem": "true"
                },
                "RecoveryPointArn.$": "$.Request.ResourceProperties.RecoveryPoint",
                "ResourceType": "EFS"
              },
              "Resource": "arn:aws:states:::aws-sdk:backup:startRestoreJob",
              "ResultPath": "$.StartRestoreJobResult",
              "Next": "Wait for job completed"
            },
            "Wait for job completed": {
              "Type": "Wait",
              "Seconds": 30,
              "Next": "DescribeRestoreJob"
            },
            "DescribeRestoreJob": {
              "Type": "Task",
              "Parameters": {
                "RestoreJobId.$": "$.StartRestoreJobResult.RestoreJobId"
              },
              "Resource": "arn:aws:states:::aws-sdk:backup:describeRestoreJob",
              "ResultPath": "$.DescribeRestoreJobResult",
              "Next": "Restore Job Completed?"
            },
            "Restore Job Completed?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.DescribeRestoreJobResult.Status",
                  "StringEquals": "COMPLETED",
                  "Next": "Transform arn to efs id"
                }
              ],
              "Default": "Wait for job completed"
            },
            "Transform arn to efs id": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName.$": "$.ArnToEfsIdLambdaName",
                "Payload": {
                  "Arn.$": "$.DescribeRestoreJobResult.CreatedResourceArn"
                }
              },
              "ResultPath": "$.TransformArnToEfsIdResult",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Send success created response"
            },
            "Send success created response": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName.$": "$.SendResponseLambdaName",
                "Payload": {
                  "Request.$": "$.Request",
                  "ResponseStatus": "SUCCESS",
                  "PhysicalResourceId.$": "$.TransformArnToEfsIdResult.Payload.EfsId"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            },
            "DeleteFileSystem": {
              "Type": "Task",
              "Parameters": {
                "FileSystemId.$": "$.Request.PhysicalResourceId"
              },
              "Resource": "arn:aws:states:::aws-sdk:efs:deleteFileSystem",
              "Next": "Send success deleted response",
              "ResultPath": "$.DeleteFileSystemResult"
            },
            "Send success deleted response": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName.$": "$.SendResponseLambdaName",
                "Payload": {
                  "Request.$": "$.Request",
                  "ResponseStatus": "SUCCESS",
                  "PhysicalResourceId.$": "$.Request.PhysicalResourceId"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        } 
      # DefinitionSubstitutions:  
      RoleArn: !GetAtt StateMachineRole.Arn
  
  FixStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: |
        {
          "Comment": "A description of my state machine",
          "StartAt": "Choise Request type",
          "States": {
            "Choise Request type": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.Request.RequestType",
                  "StringEquals": "Create",
                  "Next": "Fix"
                }
              ],
              "Default": "Send success response"
            },
            "Fix": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName.$": "$.FixLambdaName"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Send success response",
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Next": "Send failed response"
                }
              ],
              "ResultPath": "$.FixResult"
            },
            "Send success response": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName.$": "$.SendResponseLambdaName",
                "Payload": {
                  "Request.$": "$.Request",
                  "ResponseStatus": "SUCCESS"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            },
            "Send failed response": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload": {
                  "Request.$": "$.Request",
                  "ResponseStatus": "FAILED"
                },
                "FunctionName.$": "$.SendResponseLambdaName"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        } 
      # DefinitionSubstitutions:  
      RoleArn: !GetAtt StateMachineRole.Arn

  FixLambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow none
      VpcId: !Ref Vpc

  CommonLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess'
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
  
  BackupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - backup.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess'
   
  StateMachineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSBackupFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
      Policies:
        - PolicyDocument: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "iam:GetRole",
                            "iam:PassRole"
                        ],
                        "Resource": "arn:aws:iam::*:role/*"
                    }
                ]
            }
          PolicyName: CustomEfsPolicy1

  RunEfsStateMachineLambda:
    Type: 'AWS::Lambda::Function' 
    Properties:
      Code:
        ZipFile: |
          exports.handler = async(event) => {
            const AWS = require('aws-sdk');
            const stepFunctions = new AWS.StepFunctions();
            const params = {
                stateMachineArn: process.env.StateMachineArn,
                input: JSON.stringify({
                  Request: event,
                  BackupRoleArn: process.env.BackupRoleArn,
                  ArnToEfsIdLambdaName: process.env.ArnToEfsIdLambdaName,
                  SendResponseLambdaName: process.env.SendResponseLambdaName
                }),
                name: event.RequestId
            };
            await stepFunctions.startExecution(params).promise();
          };
      Environment:
        Variables:
          StateMachineArn: !Ref EfsStateMachine
          BackupRoleArn: !GetAtt BackupRole.Arn
          ArnToEfsIdLambdaName: !Ref ArnToEfsIdLambda
          SendResponseLambdaName: !Ref SendResponseLambda
      Role: !GetAtt CommonLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Timeout: 30

  RunFixStateMachineLambda:
    Type: 'AWS::Lambda::Function' 
    Properties:
      Code:
        ZipFile: |
          exports.handler = async(event) => {
            const AWS = require('aws-sdk');
            const stepFunctions = new AWS.StepFunctions();
            const params = {
                stateMachineArn: process.env.StateMachineArn,
                input: JSON.stringify({
                  Request: event,
                  SendResponseLambdaName: process.env.SendResponseLambdaName,
                  FixLambdaName: process.env.FixLambdaName
                }),
                name: event.RequestId
            };
            await stepFunctions.startExecution(params).promise();
          };
      Environment:
        Variables:
          StateMachineArn: !Ref FixStateMachine
          SendResponseLambdaName: !Ref SendResponseLambda
          FixLambdaName: !Ref FixLambda
      Role: !GetAtt CommonLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Timeout: 30

  # Converts arn of the restored resource to file system id. 
  ArnToEfsIdLambda:
    Type: 'AWS::Lambda::Function' 
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            let match = event.Arn.match(/file-system\/(.+)/) || [];
            return {
              EfsId: match[1]
            };
          }
      Role: !GetAtt CommonLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Timeout: 30

  SendResponseLambda:
    Type: 'AWS::Lambda::Function' 
    Properties: 
      Code:
        ZipFile: |
          var response = require('cfn-response');
          exports.handler = function(event, context) {
            var responseData = {};
            response.send(event.Request, context, event.ResponseStatus, responseData, event.PhysicalResourceId);
          };
      # Environment:
      #   Variables:
      #     StateMachineArn: !Ref StateMachine
      Role: !GetAtt CommonLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Timeout: 30


  FixLambda:
    Type: 'AWS::Lambda::Function' 
    Properties:
      Code:
        ZipFile: |
          const { execSync } = require('child_process');
          exports.handler = function (event, context) {            
                execSync('shopt -s dotglob \n mv aws-backup-restore_*/* .', 
                  {"cwd": process.env.mountPath}
                );       
          };
      Environment:
        Variables:
          mountPath: /mnt/efs
      Role: !GetAtt CommonLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Timeout: 30
      FileSystemConfigs:
        - Arn: !GetAtt AccessPoint.Arn
          LocalMountPath: /mnt/efs
      VpcConfig:
        SecurityGroupIds:
          - !Ref FixLambdaSecurityGroup
        SubnetIds:
          - !Ref Subnet1

  AccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    DependsOn: MountTarget
    Properties:
      FileSystemId: !Ref RecoveredEfs
      PosixUser:
        Gid: 0
        Uid: 0
      RootDirectory:
        Path: /

  EfsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow trafic from lambda
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref FixLambdaSecurityGroup
      VpcId: !Ref Vpc

  MountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref RecoveredEfs
      SecurityGroups:
        - !Ref EfsSecurityGroup
      SubnetId: !Ref Subnet1      

  # Moving:
  #    Type: Custom::Moving
  #    Properties: 
  #      ServiceToken: !GetAtt MoveFolderLambda.Arn
# Outputs:
#   Efs:
#     Value: !If [IsEmpty, !Ref EmptyFileSystem, !Ref "AWS::NoValue"]
